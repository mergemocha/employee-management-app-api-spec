openapi: 3.1.0
info:
  title: employee-management-app
  version: v1.0.0
  description: Employee management app API.
  license:
    name: MIT
    url: 'https://github.com/mergemocha/employee-management-app-api-spec/blob/master/LICENSE'
servers:
  - url: 'http://localhost:3001/api/v1'
    description: v1
paths:
  /auth/login:
    post:
      summary: Login
      operationId: post-auth-login
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      description: Logs a user in either through processing their credentials (username and password) or by validating and refreshing their authentication token.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Authentication token previously issued by server, if applicable.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            examples:
              Example:
                value:
                  username: superuser
                  password: test
        description: Body to use when authenticating with username and password (i.e. token has not been previously issued or issued token has expired).
      security: []
  /auth/logout:
    post:
      summary: Logout
      operationId: post-auth-logout
      responses:
        '200':
          $ref: '#/components/responses/200'
        '401':
          $ref: '#/components/responses/401'
        '410':
          description: Gone
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                Response:
                  value:
                    message: Unknown session
        '500':
          $ref: '#/components/responses/500'
      description: Logs a user out by terminating the session related to their authentication token.
  /employees:
    post:
      summary: Create new employee
      operationId: post-employees
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      description: Creates a new employee.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePartial'
        description: Details of the employee to create.
      security:
        - superuser-token: []
    get:
      summary: Get all employees
      operationId: get-employees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      description: Returns a list of all employees. Properties of the employee objects may be filtered away depending on user permissions and server configuration. All properties of the employee object should therefore be considered optional.
  '/employees/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Employee ID
    patch:
      summary: Update employee
      operationId: patch-employees-id
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400-Validation'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      description: Updates the information of an employee.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePartial'
            examples:
              Example:
                value:
                  id: 62273e66c62057b707d2df21
                  firstName: John
                  lastName: Appleseed
                  title: Senior Software Developer
                  salary: 100000
                  secLevel: 5
                  permanent: true
                  projects:
                    - Mastodon
                    - Hubbard
        description: 'Properties to update. All properties are optional, and only the values of declared properties are changed.'
      security:
        - superuser-token: []
    delete:
      summary: Delete employee
      operationId: delete-employees-id
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      description: Deletes an employee.
      security:
        - superuser-token: []
  /permissions/available:
    get:
      summary: Get available permissions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
              examples:
                Example:
                  value:
                    - 'read:employee.salary'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-permissions-available
      security:
        - superuser-token: []
      description: Returns all available permissions.
  '/permissions/{user}':
    parameters:
      - schema:
          type: string
        name: user
        in: path
        required: true
        description: User ID
    get:
      summary: Get user permissions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
              examples:
                Example:
                  value:
                    - 'read:employee.salary'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: get-permissions-user
      description: Returns permissions for a user.
      security:
        - superuser-token: []
    patch:
      summary: Update user permissions
      operationId: patch-permissions-user
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          description: Returned when an attempt is made to modify permissions for the superuser.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                Example:
                  value:
                    message: Superuser permissions cannot be modified
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      description: Updates the permissions of a user.
      security:
        - superuser-token: []
  /register/add-user:
    post:
      summary: Register new user
      operationId: post-register-add-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                required:
                  - message
                  - token
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      description: Registers a new user.
      parameters: []
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
        description: Details for the user to create.
components:
  schemas:
    EmployeePartial:
      title: Employee
      type: object
      description: Represents the mutable data of an Employee object.
      examples:
        - id: 62273e66c62057b707d2df21
          firstName: John
          lastName: Appleseed
          title: Senior Software Developer
          salary: 100000
          secLevel: 5
          permanent: true
          projects:
            - Mastodon
            - Hubbard
      properties:
        firstName:
          type: string
        lastName:
          type: string
        title:
          type: string
        salary:
          type: integer
        secLevel:
          type: integer
        permanent:
          type: boolean
        projects:
          type: array
          items:
            type: string
    Employee:
      title: Employee
      type: object
      description: |-
        Represents an employee in the system.

        Properties o Employee objects may be filtered away depending on user permissions and server configuration. All properties of the Employee object, apart from `id`, should therefore be considered non-guaranteed to be delivered.
      examples:
        - id: 62273e66c62057b707d2df21
          firstName: John
          lastName: Appleseed
          title: Senior Software Developer
          salary: 100000
          secLevel: 5
          permanent: true
          projects:
            - Mastodon
            - Hubbard
      properties:
        id:
          type: string
          description: MongoDB object ID
        firstName:
          type: string
        lastName:
          type: string
        title:
          type: string
        salary:
          type: integer
        secLevel:
          type: integer
        permanent:
          type: boolean
        projects:
          type: array
          items:
            type: string
      required:
        - id
    Permission:
      type: string
      title: Permission
      example: 'read:employee.salary'
      pattern: '^read:employee\..+$'
      description: Represents a permission to read a certain key of an Employee object.
  securitySchemes:
    user-token:
      name: Authorization
      type: apiKey
      in: header
      description: 'Token for a regular user. Can read employees, but not CUD them.'
    superuser-token:
      name: Authorization
      type: apiKey
      in: header
      description: 'Token for the superuser. Can CRUD employees, as well as grant or deny permissions for users.'
  responses:
    '200':
      description: Returned when the request completed successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
          examples:
            Example:
              value:
                message: OK
    '400':
      description: Returned when the request was incorrectly formatted.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            Example:
              value:
                message: Bad Request
    '401':
      description: Returned when user has supplied incorrect authentication credentials.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
          examples:
            Example:
              value:
                message: Unauthorized
    '404':
      description: Returned when the requested resource was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message
          examples:
            Example:
              value:
                message: Not Found
    '500':
      description: Returned when the server encountered an unrecoverable internal error.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            required:
              - error
              - message
          examples:
            Example:
              value:
                error: Internal Server Error
                message: Cannot read property 'test' of undefined
    400-Validation:
      description: 'Returned when the request body (usually for an Employee object) did not match the expected schema. The `error` object is a https://github.com/sideway/joi validation error.'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              error:
                type: object
                description: '@hapi/joi validation error list'
                properties:
                  _original:
                    type: object
                  details:
                    type: array
                    items: {}
            required:
              - message
          examples:
            Example:
              value:
                message: Validation error
                error:
                  _original: {}
                  details:
                    - message: '"firstName" is required'
                      path:
                        - firstName
                      type: any.required
                      context:
                        label: firstName
                        key: firstName
security:
  - user-token: []
